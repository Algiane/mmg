/* =============================================================================
**  This file is part of the mmg software package for the tetrahedral
**  mesh modification.
**  Copyright (c) Inria - IMB (Universit√© de Bordeaux) - LJLL (UPMC), 2004- .
**
**  mmg is free software: you can redistribute it and/or modify it
**  under the terms of the GNU Lesser General Public License as published
**  by the Free Software Foundation, either version 3 of the License, or
**  (at your option) any later version.
**
**  mmg is distributed in the hope that it will be useful, but WITHOUT
**  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
**  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
**  License for more details.
**
**  You should have received a copy of the GNU Lesser General Public
**  License and of the GNU General Public License along with mmg (in
**  files COPYING.LESSER and COPYING). If not, see
**  <http://www.gnu.org/licenses/>. Please read their terms carefully and
**  use this copy of the mmg distribution only if you accept them.
** =============================================================================
*/

#ifndef _MMG_H
#define _MMG_H

#include <assert.h>
#include <stdlib.h>
#include <stdio.h>
#include <limits.h>
#include <string.h>
#include <signal.h>
#include <ctype.h>
#include <float.h>
#include <math.h>

#include "libmmg.h"

#define MG_VER   "@CMAKE_RELEASE_VERSION@"" c"
#define MG_REL   "@CMAKE_RELEASE_DATE@"
#define MG_CPY   "Copyright (c) IMB-LJLL, 2004-"
#define MG_STR   "&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"

/* numerical accuracy */
#define _MMG5_EPSD      1.e-30
#define _MMG5_EPSD2     1.0e-200
#define _MMG5_EPS       1.e-06

/* Macros */
#define MG_MAX(a,b) (((a) > (b)) ? (a) : (b))
#define MG_MIN(a,b) (((a) < (b)) ? (a) : (b))

/* tags */
#define  MG_NOTAG     (0)
#define  MG_REF       (1 << 0)        /**< 1  edge reference  */
#define  MG_GEO       (1 << 1)        /**< 2  geometric ridge */
#define  MG_REQ       (1 << 2)        /**< 4  required entity */
#define  MG_NOM       (1 << 3)        /**< 8  non manifold    */
#define  MG_BDY       (1 << 4)        /**< 16  boundary entity */
#define  MG_CRN       (1 << 5)        /**< 32  corner         */
#define  MG_NUL       (1 << 6)        /**< 64  vertex removed */

#define MG_VOK(ppt)      (ppt && ((ppt)->tag < MG_NUL)) /**< Vertex OK */
#define MG_EOK(pt)       (pt && ((pt)->v[0] > 0))       /**< Element OK */

/* Macros for memory management */
/** Safe deallocation */
#define _MMG5_SAFE_FREE(ptr) do                 \
  {                                             \
    free(ptr);                                  \
    ptr = NULL;                                 \
  }while(0)

/** Safe allocation with calloc */
#define _MMG5_SAFE_CALLOC(ptr,size,type) do     \
  {                                             \
    ptr = (type *)calloc((size),sizeof(type));  \
    if ( !ptr ) {                               \
      perror("  ## Memory problem: calloc");    \
      exit(EXIT_FAILURE);                       \
    }                                           \
  }while(0)

/** Safe allocation with malloc */
#define _MMG5_SAFE_MALLOC(ptr,size,type) do     \
  {                                             \
    ptr = (type *)malloc((size)*sizeof(type));  \
    if ( !ptr ) {                               \
      perror("  ## Memory problem: malloc");    \
      exit(EXIT_FAILURE);                       \
    }                                           \
  }while(0)

/** Safe reallocation */
#define _MMG5_SAFE_REALLOC(ptr,size,type,message) do        \
  {                                                         \
    type* tmp;                                              \
    tmp = (type *)realloc((ptr),(size)*sizeof(type));       \
    if ( !tmp ) {                                           \
      _MMG5_SAFE_FREE(ptr);                                 \
      perror(" ## Memory problem: realloc");                \
      exit(EXIT_FAILURE);                                   \
    }                                                       \
                                                            \
    if ( abs(mesh->info.imprim) > 6 || mesh->info.ddebug )  \
      fprintf(stdout,                                       \
              "  ## Warning: %s:%d: %s reallocation.\n",    \
              __FILE__,__LINE__,message);                   \
                                                            \
                                                            \
    (ptr) = tmp;                                            \
  }while(0)

/** safe reallocation with memset at 0 for the new values of tab */
#define _MMG5_SAFE_RECALLOC(ptr,prevSize,newSize,type,message) do \
  {                                                               \
    type* tmp;                                                    \
    int k;                                                        \
                                                                  \
    tmp = (type *)realloc((ptr),(newSize)*sizeof(type));          \
    if ( !tmp ) {                                                 \
      _MMG5_SAFE_FREE(ptr);                                       \
      perror(" ## Memory problem: realloc");                      \
      exit(EXIT_FAILURE);                                         \
    }                                                             \
                                                                  \
    if ( abs(mesh->info.imprim) > 6 || mesh->info.ddebug )        \
      fprintf(stdout,                                             \
              "  ## Warning: %s:%d: %s reallocation.\n",          \
              __FILE__,__LINE__,message);                         \
                                                                  \
    (ptr) = tmp;                                                  \
    for ( k=prevSize; k<newSize; k++) {                           \
      memset(&ptr[k],0,sizeof(type));                             \
    }                                                             \
  }while(0)


/* Private structures */
typedef struct {
  double  b[10][3]; /**< Bezier basis functions */
  double  n[6][3],t[6][3]; /**< normals and tangents at points */
  MMG5_pPoint  p[3];
} _MMG5_Bezier;
typedef _MMG5_Bezier * _MMG5_pBezier;

/* Functions declarations */
int  _MMG5_scaleMesh(MMG5_pMesh mesh,MMG5_pSol met);
int  _MMG5_unscaleMesh(MMG5_pMesh mesh,MMG5_pSol met);

int _MMG5_buildridmet(MMG5_pMesh mesh,MMG5_pSol met,int np0,
                      double ux,double uy,double uz,double mr[6]);

/* function pointers */
double _MMG5_lenedg_iso(MMG5_pMesh ,MMG5_pSol ,int ,int, char );
double _MMG5_lenedg_ani(MMG5_pMesh mesh,MMG5_pSol met,int ip1,int ip2,char isedg);
double (*_MMG5_lenedg)(MMG5_pMesh mesh,MMG5_pSol sol ,int ,int, char );

#endif
