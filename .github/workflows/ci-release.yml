name: GitHub CI

on:
  # run tests on push events
  push:
  # run tests on PR events
  pull_request:
  # run tests manually on a given branch (default is master)
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      branch:
        # branch to test
        description: 'branch to test'
        # Default value if no value is explicitly provided
        default: 'master'
        required: false

# job
jobs:
  ci:
    runs-on: ${{ matrix.os }}

    # Launch a matrix of jobs
    strategy:
        matrix:
            os: [ubuntu-20.04,macos-10.15]
            build: [Release]
            pattern: [on,off]
            scotch: [on,off]
            vtk: [off]

            include:
              # test vtk only without scotch and with delaunay insertion (more
              # tests are useless)
              - os: ubuntu-20.04
                build: Release
                pattern: off
                scotch: off
                vtk: on

              - os: macos-10.15
                build: Release
                pattern: off
                scotch: off
                vtk: on

              # Add windows basic test (matrix is not testable as dependencies
              # don't build with MSVC)
              - os: windows-2022
                build: Release
                pattern: off
                scotch: off
                vtk: off

              - os: windows-2022
                build: Release
                pattern: on
                scotch: off
                vtk: off


    steps:
      # checkout the provided branch name if workflow is manually run
      - uses: actions/checkout@v2
        if: github.event_name == 'workflow_dispatch'
        with:
          ref: ${{github.event.inputs.branch}}

      # checkout the event branch for automatic workflows
      - uses: actions/checkout@v2
        if: github.event_name != 'workflow_dispatch'

      - name: Install VTK
        # Download vtk only if used
        if: matrix.vtk == 'on'
        run: |
          if [ "$RUNNER_OS" == "macOS" ]; then
            brew install vtk@8.2
            brew link vtk@8.2
          elif [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y libvtk7-dev
          fi

      - name: Install Sctoch
        # Download scotch only if used
        if: matrix.scotch == 'on'
        run: |
          git clone https://gitlab.inria.fr/scotch/scotch.git
          cd scotch
          git checkout v6.1.3
          cd src
          if [ "$RUNNER_OS" == "macOS" ]; then
            cp Make.inc/Makefile.inc.i686_mac_darwin10 Makefile.inc
            echo "macOS build"
          elif [ "$RUNNER_OS" == "Linux" ]; then
            cp Make.inc/Makefile.inc.x86-64_pc_linux2 Makefile.inc
            echo "Linux build"
          fi
          make scotch -j "$NJOBS"
          make install scotch -j "$NJOBS"
        env:
          NJOBS: "2"

      - name: Install LibCommons
        # LinearElasticity don't build with MSVC
        if: matrix.os != 'windows-2022'
        run: |
          git clone https://github.com/ISCDtoolbox/Commons.git
          cd Commons
          mkdir build
          cd build
          cmake ..
          make install

      - name: Install LinearElasticity
        # LinearElasticity don't build with MSVC
        if: matrix.os != 'windows-2022'
        run: |
          git clone https://github.com/ISCDtoolbox/LinearElasticity.git
          cd LinearElasticity
          mkdir build
          cd build
          cmake ..
          make install


            if [ "$RUNNER_OS" == "windows" ]; then
              BUILD_LINE:"cmake --build . --config Release"
              TEST_ARGS:"-C Release"
            else
              BUILD_LINE="make -j 2"
          fi

      - name: Print options
        run: |
          echo "${{ github.event.inputs.name }}:
            Os:      ${{ matrix.os }},
            Build:   ${{ matrix.build }},
            Pattern: ${{ matrix.pattern }},
            Scotch:  ${{ matrix.scotch }},
            VTK:     ${{ matrix.vtk }}"

      - name: Configure Mmg for Linux
        if: matrix.os == 'ubuntu-20.04'
        run: |
          mkdir build
          cd build
          # gfortran compiler depends on the os
          cmake -DCI_CONTEXT=ON \
            -DBUILD_TESTING=ON \
            -DCMAKE_BUILD_TYPE=${{matrix.build}} \
            -DPATTERN=${{matrix.pattern}} \
            -DUSE_SCOTCH=${{matrix.scotch}} \
            -DUSE_VTK={{matrix.vtk}} \
            -DTEST_LIBMMG=ON \
            -DTEST_LIBMMGS=ON \
            -DTEST_LIBMMG2D=ON \
            -DTEST_LIBMMG3D=ON \
            -DCMAKE_Fortran_COMPILER=gfortran-9 \
            ..

      - name: Configure Mmg for macOS
        if: matrix.os == 'macos-10.15'
        run: |
          mkdir build
          cd build
          # gfortran compiler depends on the os
          cmake -DCI_CONTEXT=ON \
            -DBUILD_TESTING=ON \
            -DCMAKE_BUILD_TYPE=${{matrix.build}} \
            -DPATTERN=${{matrix.pattern}} \
            -DUSE_SCOTCH=${{matrix.scotch}} \
            -DUSE_VTK={{matrix.vtk}} \
            -DTEST_LIBMMG=ON \
            -DTEST_LIBMMGS=ON \
            -DTEST_LIBMMG2D=ON \
            -DTEST_LIBMMG3D=ON \
            -DCMAKE_Fortran_COMPILER=gfortran-11 \
            ..

      - name: Configure Mmg for windows
        if: matrix.os == 'windows-2022'
        run: |
          mkdir build
          cd build
          cmake -DCI_CONTEXT=ON -DBUILD_TESTING=ON -DCMAKE_BUILD_TYPE=${{matrix.build}} -DPATTERN=${{matrix.pattern}} -DUSE_SCOTCH=${{matrix.scotch}} -DUSE_VTK={{matrix.vtk}} -DTEST_LIBMMG=ON -DTEST_LIBMMGS=ON -DTEST_LIBMMG2D=ON -DTEST_LIBMMG3D=ON ..
        #shell: powershell

      - name: Build Mmg for macOS or Linux
        if: matrix.os != 'windows-2022'
        run: |
          cd build
          make -j "$NJOBS"
        env:
          NJOBS: "2"

      - name: Build Mmg for windows
        if: matrix.os == 'windows-2022'
        run: |
          cd build
          cmake --build . --config Release
        # shell: powershell

      - name: Test Mmg for macOS or Linux
        if: ${{ matrix.vtk == 'off' }} &&  ${{ matrix.os != 'windows-2022' }}
        run: |
          cd build
          ctest -VV "$CTEST_ARGS"

      - name: Test Mmg for Windows
        if: ${{ matrix.vtk == 'off' }} &&  ${{ matrix.os == 'windows-2022' }}
        run: |
          cd build
          ctest -VV "$CTEST_ARGS" -C Release
        #shell: powershell

      - name: Test non native I/Os of Mmg
        if: ${{ matrix.vtk == 'on' }}
        run: |
          cd build
          ctest -R "msh|vtk" -VV
